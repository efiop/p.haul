#!/bin/env python
import sys
import argparse
import p_haul_iters as ph_iters
import images
import criu_api
import xem_rpc
import ssh_tunnel

# Usage idea
# p.haul <type> <id> <destination>
#
# E.g.
#
# # p.haul ovz 100 10.0.0.1
#
# or
#
# # p.haul lxc myct 10.0.0.2
#

def parse_dest(dest):
	# parse string IP:PORT into tuple (ip,port)
	spl = dest.split(":", 1)
	if len(spl) == 1:
		ip = spl[0]
		port = xem_rpc.default_rpc_port
	else:
		ip = spl[0]
		port = int(spl[1])
	return (ip, port)

parser = argparse.ArgumentParser("Process HAULer")
parser.add_argument("type", help = "Type of hat to haul, e.g. ovz")
parser.add_argument("id", help = "ID of what to haul")
parser.add_argument("to", help = "IP:PORT where to haul")
parser.add_argument("-v", help = "Verbosity level", default = criu_api.def_verb, type = int, dest = "verbose")
parser.add_argument("--keep-images", help = "Keep images after migration", default = False, action = 'store_true')
parser.add_argument("--dst-rpid", help = "Write pidfile on restore", default = None)
parser.add_argument("--img-path", help = "Dirctory where to put images", default = images.def_path)
parser.add_argument("--pid-root", help = "Path to tree's FS root")
parser.add_argument("--force", help = "Don't do any sanity (CPU compat) checks", default = False, action = 'store_true')
parser.add_argument("--ssh", help = "Use ssh tunnel to encrypt traffic", default = False, action = "store_true")
parser.add_argument("--ssh-compression", help = "Use compression in the tunnel", default = False, action = "store_true")
parser.add_argument("--ssh-username", help = "Remote username", type = str)
parser.add_argument("--ssh-port", help = "Port to connect to ssh on the remote host", default = ssh_tunnel.def_ssh_port, type = int)
parser.add_argument("--ssh-local-port", help = "Local port to forward", type = int, default = ssh_tunnel.def_loc_port)

args = vars(parser.parse_args())

args["to"] = parse_dest(args.pop("to"))

ssh = ssh_tunnel.Tunnel()
args = ssh.filter_opts(args)
ssh.start()

ph_type = (args.pop("type"), args.pop("id"))
dst = args.pop("to")


# Start the migration
worker = ph_iters.phaul_iter_worker(ph_type, dst)
worker.set_options(args)
worker.start_migration()

ssh.stop()
